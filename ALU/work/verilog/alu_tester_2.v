/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_tester_2 (
    input clk,
    input rst,
    input next,
    input [15:0] actout,
    output reg [15:0] a,
    output reg [15:0] b,
    output reg [5:0] alufn,
    output reg q,
    output reg [6:0] state_index
  );
  
  
  
  localparam IDLE_state = 6'd0;
  localparam ADD1_state = 6'd1;
  localparam ADD2_state = 6'd2;
  localparam ADD3_state = 6'd3;
  localparam SUB1_state = 6'd4;
  localparam SUB2_state = 6'd5;
  localparam AND_state = 6'd6;
  localparam OR_state = 6'd7;
  localparam XOR_state = 6'd8;
  localparam A_state = 6'd9;
  localparam B_state = 6'd10;
  localparam SHL1_state = 6'd11;
  localparam SHL2_state = 6'd12;
  localparam SHR1_state = 6'd13;
  localparam SHR2_state = 6'd14;
  localparam SRA1_state = 6'd15;
  localparam SRA2_state = 6'd16;
  localparam CMPEQ1_state = 6'd17;
  localparam CMPEQ2_state = 6'd18;
  localparam CMPLT1_state = 6'd19;
  localparam CMPLT2_state = 6'd20;
  localparam CMPLT3_state = 6'd21;
  localparam CMPLE1_state = 6'd22;
  localparam CMPLE2_state = 6'd23;
  localparam CMPLE3_state = 6'd24;
  localparam MUL1_state = 6'd25;
  localparam MUL2_state = 6'd26;
  localparam MUL3_state = 6'd27;
  localparam MUL4_state = 6'd28;
  localparam MUL5_state = 6'd29;
  localparam MOD1_state = 6'd30;
  localparam MOD2_state = 6'd31;
  localparam MOD3_state = 6'd32;
  
  reg [5:0] M_state_d, M_state_q = IDLE_state;
  wire [7-1:0] M_state_cout_out;
  reg [1-1:0] M_state_cout_button;
  state_counter_12 state_cout (
    .clk(clk),
    .rst(rst),
    .button(M_state_cout_button),
    .out(M_state_cout_out)
  );
  
  integer expout;
  
  always @* begin
    M_state_d = M_state_q;
    
    q = 1'h0;
    a = 16'h0000;
    b = 16'h0000;
    alufn = 6'h00;
    expout = 16'h0000;
    state_index = 1'h0;
    M_state_cout_button = next;
    
    case (M_state_q)
      IDLE_state: begin
        q = 1'h1;
        state_index = M_state_cout_out;
        if (next) begin
          M_state_d = ADD1_state;
        end
      end
      ADD1_state: begin
        a = 16'h0fff;
        b = 16'h7001;
        expout = 16'h8000;
        alufn = 6'h00;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = ADD2_state;
        end
      end
      ADD2_state: begin
        a = 16'h8001;
        b = 16'h0011;
        expout = 16'h8012;
        alufn = 6'h00;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = ADD3_state;
        end
      end
      ADD3_state: begin
        a = 16'hf000;
        b = 16'h1000;
        expout = 1'h0;
        alufn = 6'h00;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = SUB1_state;
        end
      end
      SUB1_state: begin
        a = 16'h3333;
        b = 16'h3303;
        expout = 16'h0030;
        alufn = 6'h01;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = SUB2_state;
        end
      end
      SUB2_state: begin
        a = 16'h3000;
        b = 16'hffff;
        expout = 16'h3001;
        alufn = 6'h01;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = AND_state;
        end
      end
      AND_state: begin
        a = 16'hff00;
        b = 16'hf0f0;
        expout = 16'hf000;
        alufn = 6'h18;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        a = 16'hff00;
        b = 16'hf0f0;
        expout = 16'hfff0;
        alufn = 6'h1e;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        a = 16'hff00;
        b = 16'hf0f0;
        expout = 16'h0ff0;
        alufn = 6'h16;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = A_state;
        end
      end
      A_state: begin
        a = 16'hff00;
        b = 16'hf0f0;
        expout = 16'hff00;
        alufn = 6'h1a;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = B_state;
        end
      end
      B_state: begin
        a = 16'hff00;
        b = 16'hf0f0;
        expout = 16'hf0f0;
        alufn = 6'h1c;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = SHL1_state;
        end
      end
      SHL1_state: begin
        a = 16'hf18f;
        b = 16'h000a;
        expout = 16'h3c00;
        alufn = 6'h20;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = SHL2_state;
        end
      end
      SHL2_state: begin
        a = 16'hf18f;
        b = 16'h0011;
        expout = 16'h0000;
        alufn = 6'h20;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = SHR1_state;
        end
      end
      SHR1_state: begin
        a = 16'hf18f;
        b = 16'h000a;
        expout = 16'h003c;
        alufn = 6'h21;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = SHR2_state;
        end
      end
      SHR2_state: begin
        a = 16'hf18f;
        b = 16'h0011;
        expout = 16'h0000;
        alufn = 6'h21;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = SRA1_state;
        end
      end
      SRA1_state: begin
        a = 16'hf18f;
        b = 16'h000a;
        expout = 16'hfffc;
        alufn = 6'h23;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = SRA2_state;
        end
      end
      SRA2_state: begin
        a = 16'hf18f;
        b = 16'h0011;
        expout = 5'h10;
        alufn = 6'h23;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = CMPEQ1_state;
        end
      end
      CMPEQ1_state: begin
        a = 16'hf18f;
        b = 16'hf18f;
        expout = 16'h0001;
        alufn = 6'h33;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = CMPEQ2_state;
        end
      end
      CMPEQ2_state: begin
        a = 16'hf18f;
        b = 16'hf18e;
        expout = 16'h0000;
        alufn = 6'h33;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = CMPLT1_state;
        end
      end
      CMPLT1_state: begin
        a = 16'hf18f;
        b = 16'hf98f;
        expout = 16'h0001;
        alufn = 6'h35;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = CMPLT2_state;
        end
      end
      CMPLT2_state: begin
        a = 16'hf98f;
        b = 16'hf18f;
        expout = 16'h0000;
        alufn = 6'h35;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = CMPLT3_state;
        end
      end
      CMPLT3_state: begin
        a = 16'hf18f;
        b = 16'hf18f;
        expout = 16'h0000;
        alufn = 6'h35;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = CMPLE1_state;
        end
      end
      CMPLE1_state: begin
        a = 16'hf18f;
        b = 16'hf98f;
        expout = 16'h0001;
        alufn = 6'h37;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = CMPLE2_state;
        end
      end
      CMPLE2_state: begin
        a = 16'hf98f;
        b = 16'hf18f;
        expout = 16'h0000;
        alufn = 6'h37;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = CMPLE3_state;
        end
      end
      CMPLE3_state: begin
        a = 16'hf18f;
        b = 16'hf18f;
        expout = 16'h0001;
        alufn = 6'h37;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = MUL1_state;
        end
      end
      MUL1_state: begin
        a = 16'h0077;
        b = 16'h006a;
        expout = 16'h3146;
        alufn = 6'h22;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = MUL2_state;
        end
      end
      MUL2_state: begin
        a = 16'hffe8;
        b = 16'hffe0;
        expout = 16'h0300;
        alufn = 6'h22;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = MUL3_state;
        end
      end
      MUL3_state: begin
        a = 16'h0018;
        b = 16'hffe0;
        expout = 16'hfd00;
        alufn = 6'h22;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = MUL4_state;
        end
      end
      MUL4_state: begin
        a = 16'hb48d;
        b = 16'h4bbc;
        expout = 16'he68c;
        alufn = 6'h22;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = MUL5_state;
        end
      end
      MUL5_state: begin
        a = 16'hb48d;
        b = 16'h0000;
        expout = 16'h0000;
        alufn = 6'h22;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = MOD1_state;
        end
      end
      MOD1_state: begin
        a = 16'h0025;
        b = 16'h0005;
        expout = 16'h0002;
        alufn = 6'h3f;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = MOD2_state;
        end
      end
      MOD2_state: begin
        a = 16'h0025;
        b = 16'h0000;
        expout = 16'h0025;
        alufn = 6'h3f;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = MOD3_state;
        end
      end
      MOD3_state: begin
        a = 16'h0000;
        b = 16'h0005;
        expout = 16'h0000;
        alufn = 6'h3f;
        state_index = M_state_cout_out;
        if (expout == actout) begin
          q = 1'h1;
        end else begin
          q = 1'h0;
        end
        if (next) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule

module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    .rst(rst) {
      //basket_fsm basket_fsm;
      main_fsm main_fsm;
      
      
    }
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // For basket_fsm test
    
    //button_conditioner left_buttoncond;
    //edge_detector left_buttondetector(#RISE(1), #FALL(0));
    //button_conditioner right_buttoncond;
    //edge_detector right_buttondetector(#RISE(1), #FALL(0));
    //button_conditioner colour_buttoncond;
    //edge_detector colour_buttondetector(#RISE(1), #FALL(0));
    
    // For main_fsm test
    
    button_conditioner start_buttoncond;
    edge_detector start_buttondetector(#RISE(1), #FALL(0));
    
    
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
        
    
    // test basket_fsm
    
    // left_buttoncond.in = io_button[0];  // button that triggers move left
    // left_buttondetector.in = left_buttoncond.out;  // edge detector to ensure a single button press results in an output of 1 in 1 clk cycle only
    //right_buttoncond.in = io_button[1];  // button that triggers move right
    //right_buttondetector.in = right_buttoncond.out;
    //colour_buttoncond.in = io_button[2];  // button that triggers move colour
    //colour_buttondetector.in = colour_buttoncond.out;
    
    //basket_fsm.l = left_buttondetector.out;
    //basket_fsm.r = right_buttondetector.out;
    //basket_fsm.c = colour_buttondetector.out;
    
    //io_led[0] = basket_fsm.q;
    
    
    // test main_fsm
    
    start_buttoncond.in = io_button[0];
    start_buttondetector.in = start_buttoncond.out;
    main_fsm.start = start_buttondetector.out;
    main_fsm.clkhold = io_dip[1][0];
    main_fsm.rd2 = 0;
    main_fsm.alu = 0;
    
    case (io_dip[0][0]) {
      b0:
        io_led[2][7:6] = main_fsm.asel; // 2 bits
        io_led[2][5:3] = main_fsm.bsel; // 3 bits
        io_led[2][1] = main_fsm.stu; // 1 bits
        io_led[2][0] = main_fsm.we; // 1 bits
        io_led[1][7:2] = main_fsm.alufn; // 6 bits
        
      b1:
        io_led[2] = main_fsm.ra; // 4 bits
        io_led[1] = main_fsm.rb; // 4 bits 
        io_led[0] = main_fsm.rc; // 4 bits
    //}
    
}
    
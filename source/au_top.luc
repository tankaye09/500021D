module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  alu_ alu;
  
  
  .clk(clk) {
    .rst(rst) {
      dff register_a[16];
      dff register_b[16];
    }
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    

    // Store a and b inputs
    
    if(io_dip[2][0]){                      // if io_dip[2][0] is high, store io_dip[1] and io_dip[0] as a inputs
      register_a.d[15:8] = io_dip[1];
      register_a.d[7:0] = io_dip[0];
    }
    else {                                 // if io_dip[2][0] is low, store io_dip[1] and io_dip[0] as b inputs
      register_b.d[15:8] = io_dip[1];
      register_b.d[7:0] = io_dip[0];
    }
    
    // test for that registers are storing a and b
    // case(io_dip[2][1]) {
    //  b0:
    //    io_led[2] = register_a.q[15:8];
    //    io_led[1] = register_a.q[7:0];
    //  b1:
    //    io_led[2] = register_b.q[15:8];
    //    io_led[1] = register_b.q[7:0];
    //  default:
    //    io_led[2] = register_a.q[15:8];
    //    io_led[1] = register_a.q[7:0];
    //}

    // test for adder
    //adder.alufn0 = io_dip[2][1];          
    //adder.a = register_a.q;
    //adder.b = register_b.q;
    //io_led[1] = adder.q[15:8];             // output sum of adder displayed in io_led[1] and io_led[0]
    //io_led[0] = adder.q[7:0];
    //io_led[2][2] =adder.z;
    //io_led[2][1] =adder.v;
    //io_led[2][0] =adder.n;
    
    // alu
    
    alu.a = register_a.q;
    alu.b = register_b.q;
    alu.alufn = io_dip[2][7:2];             // io_dip[2][7:2] = alufn6 - alufn0
    io_led[1] = alu.q[15:8];                // output sum of adder displayed in io_led[1] and io_led[0]
    io_led[0] = alu.q[7:0];
    
  }
}
module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  alu_ alu;  
  
  .clk(clk) {
    .rst(rst) {
      dff register_a[16];
      dff register_b[16];
      alu_tester tester;
    }
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner buttoncond;
    edge_detector buttondetector(#RISE(1), #FALL(0));
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // ALU setup
    
    // Store a and b inputs by flipping the io_dip[1] and io_dip[0] switches
    if(io_dip[2][0]){                      // if io_dip[2][0] is high, store io_dip[1] and io_dip[0] as a inputs
      register_a.d[15:8] = io_dip[1];
      register_a.d[7:0] = io_dip[0];
    }
    else {                                 // if io_dip[2][0] is low, store io_dip[1] and io_dip[0] as b inputs
      register_b.d[15:8] = io_dip[1];
      register_b.d[7:0] = io_dip[0];
    }
    
    alu.a = 0;  // initialise with 0
    alu.b = 0;  // initialise with 0
    alu.alufn = 0;   // initialise with 0
    io_led[1] = alu.q[15:8];  // 16 MSB of alu output shown in io_led[1]
    io_led[0] = alu.q[7:0];   // 16 LSB of alu output shown in io_led[0]
    
    
    // ALU auto tester setup
    
    buttoncond.in = io_button[0];  // button that triggers next state of tester circuit
    buttondetector.in = buttoncond.out; // edge detector to ensure a single button press results in an output of 1 in 1 clk cycle only
    tester.next = 0;  // initialise tester.next button as always 0 until ALU is in auto tester mode
    tester.actout = 0;  // initialise actual output to be 0 until ALU is in auto tester mode

    // implement mux with IO_DIP[2][1] as selector. If 0, ALU Operation, if 1, ALU Auto Tester
    
    case(io_dip[2][1]) {     
      b0: // normal ALU operations
        alu.a = register_a.q;                   // alu a input takes in register_a stored value
        alu.b = register_b.q;                   // alu b input takes in register_b stored value
        alu.alufn = io_dip[2][7:2];             // io_dip[2][7:2] = alufn6 - alufn0
        //io_led[1] = alu.q[15:8];                // output sum of adder displayed in io_led[1] and io_led[0]
        //io_led[0] = alu.q[7:0];
      
      b1: // ALU auto tester
        tester.next = buttondetector.out;       // in tester mode, next button accepts the output of buttondetector
        tester.actout = alu.q;                  // actual output given by the actual alu operation
        
        io_led[2][0] = tester.q;                // output boolean of tester
        alu.a = tester.a;                       // a from tester as input a for alu
        alu.b = tester.b;                       // b from tester as input b for alu
        alu.alufn = tester.alufn;               // alufn from tester as input alufn for alu
    }
  }
}

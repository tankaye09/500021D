<<<<<<< Updated upstream
module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  alu_ alu;  
  
  .clk(clk) {
    .rst(rst) {
      dff register_a[16];
      dff register_b[16];
      alu_tester tester;
    }
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner buttoncond;
    edge_detector buttondetector(#RISE(1), #FALL(0));
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // ALU setup
    
    // Store a and b inputs by flipping the io_dip[1] and io_dip[0] switches
    if(io_dip[2][0]){                      // if io_dip[2][0] is high, store io_dip[1] and io_dip[0] as a inputs
      register_a.d[15:8] = io_dip[1];
      register_a.d[7:0] = io_dip[0];
    }
    else {                                 // if io_dip[2][0] is low, store io_dip[1] and io_dip[0] as b inputs
      register_b.d[15:8] = io_dip[1];
      register_b.d[7:0] = io_dip[0];
    }
    
    alu.a = 0;  // initialise with 0
    alu.b = 0;  // initialise with 0
    alu.alufn = 0;   // initialise with 0
    io_led[1] = alu.q[15:8];  // 16 MSB of alu output shown in io_led[1]
    io_led[0] = alu.q[7:0];   // 16 LSB of alu output shown in io_led[0]
    
    
    // ALU auto tester setup
    
    buttoncond.in = io_button[0];  // button that triggers next state of tester circuit
    buttondetector.in = buttoncond.out; // edge detector to ensure a single button press results in an output of 1 in 1 clk cycle only
    tester.next = 0;  // initialise tester.next button as always 0 until ALU is in auto tester mode
    tester.actout = 0;  // initialise actual output to be 0 until ALU is in auto tester mode

    // implement mux with IO_DIP[2][1] as selector. If 0, ALU Operation, if 1, ALU Auto Tester
    
    case(io_dip[2][1]) {     
      b0: // normal ALU operations
        alu.a = register_a.q;                   // alu a input takes in register_a stored value
        alu.b = register_b.q;                   // alu b input takes in register_b stored value
        alu.alufn = io_dip[2][7:2];             // io_dip[2][7:2] = alufn6 - alufn0
        //io_led[1] = alu.q[15:8];                // output sum of adder displayed in io_led[1] and io_led[0]
        //io_led[0] = alu.q[7:0];
      
      b1: // ALU auto tester
        tester.next = buttondetector.out;       // in tester mode, next button accepts the output of buttondetector
        tester.actout = alu.q;                  // actual output given by the actual alu operation
        
        io_led[2][0] = tester.q;                // output boolean of tester
        io_led[2][7:1] = tester.state_index;    // current state index of tester
        alu.a = tester.a;                       // a from tester as input a for alu
        alu.b = tester.b;                       // b from tester as input b for alu
        alu.alufn = tester.alufn;               // alufn from tester as input alufn for alu
    }
  }
}
=======
module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    
    // my IOs
    output customout[3],
    input customin[5]
    
  ) {
  
  sig rst;                  // reset signal
  sig randNum[3]; 
  
  alu_ alu;
  
  .clk(clk) {
    .rst(rst) {
      basket_fsm basket_fsm;
      regfile regfile;
      main_fsm main_fsm;                
      rand_gen random; // random number generator
      
    }
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    
    // For basket_fsm
    
    button_conditioner left_buttoncond;
    edge_detector left_buttondetector(#RISE(1), #FALL(0));
    button_conditioner right_buttoncond;
    edge_detector right_buttondetector(#RISE(1), #FALL(0));
    button_conditioner colour_buttoncond;
    edge_detector colour_buttondetector(#RISE(1), #FALL(0));
    
    // For main_fsm
    
    button_conditioner start_buttoncond;
    edge_detector start_buttondetector(#RISE(1), #FALL(0));
  
    // main fsm test
    button_conditioner next_buttoncond;
    edge_detector next_buttondetector(#RISE(1), #FALL(0));
    
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    customout = b111;
    
    randNum = random.debug[2:0]; // random number
        
    
    // basket_fsm
    
    left_buttoncond.in = customin[0];  // button that triggers move left
    left_buttondetector.in = left_buttoncond.out;  // edge detector to ensure a single button press results in an output of 1 in 1 clk cycle only
    right_buttoncond.in = customin[1];  // button that triggers move right
    right_buttondetector.in = right_buttoncond.out;
    colour_buttoncond.in = customin[2];  // button that triggers move colour
    colour_buttondetector.in = colour_buttoncond.out;
    
    basket_fsm.l = left_buttondetector.out;
    basket_fsm.r = right_buttondetector.out;
    basket_fsm.c = colour_buttondetector.out;
    
    //io_led[0] = basket_fsm.q;
    
    // main_fsm
     
    start_buttoncond.in = io_button[1];
    start_buttondetector.in = start_buttoncond.out;
    
    main_fsm.start = start_buttondetector.out;
    main_fsm.rd2 = regfile.read_data_2;
    main_fsm.hold = b0;
    main_fsm.clkHold = b0;
    main_fsm.cycleCounter = regfile.cycle_counter_data;
    
    // test_fsm
    
    next_buttoncond.in = io_button[0];
    next_buttondetector.in = next_buttoncond.out;
    
    main_fsm.next = next_buttondetector.out;
    io_led[0] = alu.q[7:0];
    io_led[1] = alu.q[15:8];
    io_led[2][5:0] = main_fsm.alufn;
    
    
    // regfile
    
    regfile.read_address_1 = main_fsm.ra;
    regfile.read_address_2 = main_fsm.rb;
    regfile.write_address = main_fsm.rc;
    
    regfile.write_enable = main_fsm.we;
    regfile.write_data = alu.q;
    
    // alu
    
    alu.a = regfile.read_data_1;
    alu.b = regfile.read_data_2;
    alu.alufn = main_fsm.alufn;
    
    // asel
    
    case(main_fsm.asel) {
      b00: 
        alu.a = regfile.read_data_1;   // ASEL = 00 => A input to ALU = RD1
      b01:
        alu.a = 16b1;                  // ASEL = 01 => A input to ALU = 01
      b10:
        alu.a = 16b0;                  // ASEL = 10 => A input to ALU = 0
      default:
        alu.a = regfile.read_data_1;
    
    }
   

    // bsel
    
    case(main_fsm.bsel) {
      b000:
        alu.b = regfile.read_data_2;  // BSEL = 00 => B input to ALU = RD2
      b001:
        alu.b = 16b01;                // BSEL = 01 => B input to ALU = 1
      b010:
        alu.b = 16b10;                // BSEL = 10 => B input to ALU = 2
      b011:
        alu.b = 16b11;                // BSEL = 11 => B input to ALU = 3
      b100:
        alu.b = 16b0;                 // BSEL = 100 => B input to ALU = 0
      b101:
        alu.b = basket_fsm.q;         // BSEL = 101 => B input to ALU = basket_position
      b110:
        //random number
        alu.b = randNum;            // BSEL = 100 => B input to ALU = random
      b111:
        alu.b = 16h0A;                 // BSEL = 111 => B input to ALU = 10 (Might change to slow score increment
      default:
        alu.b = regfile.read_data_2;
      
    }
    
}
    
>>>>>>> Stashed changes

module tester_sk (
    input clk,  // clock
    input rst,  // reset
    input next, 
    input start, 
    input actout[16],
    output a[16],
    output b[16],
    output alufn[6],
    output q // If the test case passes, set q to 1. Else, q to 0
  ) {
  .clk(clk) {
    .rst(rst) {
      fsm state = {SRA1,SRA2,CMPEQ1,CMPEQ2,CMPLT1,CMPLT2,CMPLT3,CMPLE1,CMPLE2,CMPLE3}; // default will be IDLE
    }
  }
  
  var expout; // Variable to store the expected output
  
  always {
    q = 0;
    a = 16b0;
    b = 16b0;
    alufn = 6b0;
    expout = 16b0;
      
  case(state.q) {
    
    // Expected output is 1111 1111 1111 1100 as we shift a by 10 to the right and pad with 1
    state.SRA1:
      a = 16b1111000110001111;
      b = 16b0000000000001010;
      expout = 16b1111111111111100;
      alufn = 6b100011;
      if (next) {
        if (expout == actout) {
          q = 1;
        } else {
          q = 0;
        }
        state.d = state.SRA2; // Move on to the next test case
      }
    
    // Expected output is 1111 1111 1111 1111 as we shift a by 17 bits to the right and pad with 1
    state.SRA2:
      a = 16b1111000110001111;
      b = 16b0000000000010001;
      expout = 16b1111111111111111;
      alufn = 6b100011;
      if (next) {
        if (expout == actout) {
          q = 1;
        } else {
          q = 0;
        }
        state.d = state.CMPEQ1; // Move on to the next test case
      }
    
    // Exected output is 1 as a is equals to b
    state.CMPEQ1:
      a = 16b1111000110001111;
      b = 16b1111000110001111;
      expout = 16b0000000000000001;
      alufn = 6b110011;
      if (next) {
        if (expout == actout) {
          q = 1;
        } else {
          q = 0;
        }
        state.d = state.CMPEQ2; // Move on to the next test case
      }
    
    // Expected output is 0 as a is not equals to b  
    state.CMPEQ2:
      a = 16b1111000110001111;
      b = 16b1111000110001110;
      expout = 16b0;
      alufn = 6b110011;
      if (next) {
        if (expout == actout) {
          q = 1;
        } else {
          q = 0;
        }
      state.d = state.CMPLT1; // Move on to the next test case
      }
    
    // Expected output is 1 as a is less than b   
    state.CMPLT1:
      a = 16b1111000110001111;
      b = 16b1111100110001111;
      expout = 16b0000000000000001;
      alufn = 6b110101;
      if (next) {
        if (expout == actout) {
          q = 1;
        } else {
          q = 0;
        }
      state.d = state.CMPLT2; // Move on to the next test case
      }
        
    // Expected output is 0 as a is more than b
    state.CMPLT2:
      a = 16b1111100110001111;
      b = 16b1111000110001111;
      expout = 16b0;
      alufn = 6b110101;
      if (next) {
        if (expout == actout) {
          q = 1;
        } else {
          q = 0;
        }
      state.d = state.CMPLT3; // Move on to the next test case
      }
    
    // Expected output is 0 as a is equal to b
    state.CMPLT3:
      a = 16b1111000110001111;
      b = 16b1111000110001111;
      expout = 16b0;
      alufn = 6b110101;
      if (next) {
        if (expout == actout) {
          q = 1;
        } else {
          q = 0;
        }
      state.d = state.CMPLE1; // Move on to the next test case
      }
    
    // Expected output is 1 as a is less than b
    state.CMPLE1:
      a = 16b1111000110001111;
      b = 16b1111100110001111;
      expout = 16b0000000000000001;
      alufn = 6b110101;
      if (next) {
        if (expout == actout) {
          q = 1;
        } else {
          q = 0;
        }
      state.d = state.CMPLE2; // Move on to the next test case
      }
    
    // Expected output is 0 as a is more than b
    state.CMPLE2:
      a = 16b1111100110001111;
      b = 16b1111000110001111;
      expout = 16b0;
      alufn = 6b110101;
      if (next) {
        if (expout == actout) {
          q = 1;
        } else {
          q = 0;
        }
      state.d = state.CMPLE3; // Move on to the next test case
      }
    
    // Expected output is 1 as a is equal to b
    state.CMPLE3:
      a = 16b1111000110001111;
      b = 16b1111000110001111;
      expout = 16b0000000000000001;
      alufn = 6b110101;
      if (next) {
        if (expout == actout) {
          q = 1;
        } else {
          q = 0;
        }
      state.d = state.MUL1; // Move on to the next test case
      }
    }
  }
}
